{
    "name": "FishermansAssistant",
    "type": "directory",
    "children": [
        {
            "name": "api.js",
            "type": "file",
            "size": 9412,
            "modified": "Fri Apr 11 20:57:36 2025",
            "content": "import axios from 'axios';\nimport { OPENAI_API_KEY } from '@env';\n\nconst getSpeciesPrompt = (cityState) => `\nGiven a location in ${cityState} (e.g., \"Mobile, AL\"), provide a list of 5-10 popular fish species that anglers commonly target in this region. Return the list in the following JSON format:\n{\n  \"species\": [\n    \"Fish Species 1\",\n    \"Fish Species 2\",\n    \"Fish Species 3\",\n    ...\n  ]\n}\nUse current knowledge of recreational fishing in the United States or Canada for accuracy. Return only common names of species (e.g., \"Largemouth Bass,\" not \"Micropterus salmoides\"). Strictly return the response as JSON only, with no additional text or Markdown formatting outside the JSON structure.\n`;\n\nconst getAdvicePrompt = (location, species, cityState, currentDate, forecastData, waterData, speciesTempRange, timeOfDay) => `\nYou are an expert fishing advisor providing tailored advice for anglers near ${cityState} on ${currentDate} during the ${timeOfDay} time of day. ${\n  location && location.coords ? `The coordinates are latitude ${location.coords.latitude}, longitude ${location.coords.longitude}, influencing local weather and water conditions.` : ''\n}\n\n**Current Conditions:**\n- **Air Temperature**: Low ${forecastData.lowTempF}\u00b0F, High ${forecastData.highTempF}\u00b0F\n- **Temperature Trend (last 3 days)**: ${forecastData.tempTrend}\n- **Precipitation**: ${forecastData.totalPrecipIn} inches\n- **Wind Speed**: ${forecastData.avgWindMph} mph, direction ${forecastData.windDeg}\u00b0\n- **Barometric Pressure**: ${forecastData.pressureHpa} hPa\n- **Cloud Cover**: ${forecastData.cloudCover}% (0% = clear, 100% = overcast)\n- **Humidity**: ${forecastData.humidity}%\n- **Moon Phase**: ${forecastData.moonPhase} (0 = new, 0.5 = full, etc.)\n- **Water Temperature**: ${waterData.waterTempF ? `${waterData.waterTempF}\u00b0F` : 'Not available'}\n- **Water Level**: ${waterData.gageHeightFt ? `${waterData.gageHeightFt} ft` : 'Not available'}\n- **Water Clarity**: ${waterData.clarity ? waterData.clarity : 'Not available'}\n- **Flow Rate**: ${waterData.flowRateCfs ? `${waterData.flowRateCfs} CFS` : 'Not available'}\n- **Optimal Water Temp for ${species || 'the species'}:**: ${speciesTempRange ? `${speciesTempRange.min}\u00b0F - ${speciesTempRange.max}\u00b0F` : 'Not available'}\n\n${\n  species && species !== 'None'\n    ? `Provide the best strategies to target ${species} under these conditions near ${cityState} during ${timeOfDay}. You MUST:\n      - Use all provided weather, water data, and optimal temperature range to tailor bait, strategy, and tackle.\n      - Consider the time of day (${timeOfDay}) to adjust strategies (e.g., fish may be in different depths or more active at certain times).\n      - Account for water clarity and flow rate when recommending bait colors and fishing locations (e.g., brighter lures in murky water, calmer eddies in high flow).\n      - Factor in cloud cover, humidity, and temperature trends to predict fish behavior (e.g., overcast skies might increase surface activity).\n      - Do not specify a particular fishing spot, but base tips on conditions typical within 30 miles of ${cityState}.`\n    : `Suggest ONE fish species to target (common name only) and the best strategies to catch it under these conditions near ${cityState} during ${timeOfDay}. You MUST:\n      - Use all provided weather, water data, and optimal temperature range to tailor bait, strategy, and tackle.\n      - Consider the time of day (${timeOfDay}) to adjust strategies (e.g., fish may be in different depths or more active at certain times).\n      - Account for water clarity and flow rate when recommending bait colors and fishing locations (e.g., brighter lures in murky water, calmer eddies in high flow).\n      - Factor in cloud cover, humidity, and temperature trends to predict fish behavior (e.g., overcast skies might increase surface activity).\n      - Do not specify a particular fishing spot, but base tips on conditions typical within 30 miles of ${cityState}.`\n}\n\n**Instructions:**\n- Use U.S. units (\u00b0F, inches, mph, feet, hPa, CFS).\n- Base tips on air temp, temperature trend, precipitation, wind, pressure, cloud cover, humidity, moon phase, water temp, water level, water clarity, flow rate, and the species' optimal water temperature range.\n- Provide tackle recommendations including:\n  - **Rod**: Type (e.g., light, medium, heavy), length (e.g., 6'6\"), and action (e.g., fast, moderate).\n  - **Line**: Weight (e.g., 10 lb test) and material (e.g., monofilament, fluorocarbon, braided).\n- Avoid naming a specific location (e.g., \"Mobile Bay\"); focus on general strategies for the area.\n\nReturn the response in this JSON format:\n{\n  \"bait\": \"Recommended bait or lures based on conditions\",\n  \"strategy\": \"Fishing tips tailored to conditions\",\n  \"tackle\": {\n    \"rod\": \"Recommended rod type, length, and action (e.g., medium-heavy 7' rod, fast action)\",\n    \"line\": \"Recommended line weight and material (e.g., 10 lb fluorocarbon)\"\n  },\n  ${species && species !== 'None' ? '' : '\"recommended_species\": \"Suggested fish (common name only)\",'}\n  \"additional_notes\": \"Extra tips based on data (optional)\"\n}\nStrictly return JSON only, with no additional text or Markdown outside the JSON structure.\n`;\n\nexport const getSpeciesListFromAI = async (cityState) => {\n  const prompt = getSpeciesPrompt(cityState);\n  try {\n    const response = await axios.post(\n      'https://api.openai.com/v1/chat/completions',\n      {\n        model: 'gpt-4o-mini',\n        messages: [{ role: 'user', content: prompt }],\n      },\n      { headers: { 'Authorization': `Bearer ${OPENAI_API_KEY}` } }\n    );\n    const content = response.data.choices[0].message.content;\n    let parsed;\n    try {\n      parsed = JSON.parse(content);\n    } catch (e) {\n      const jsonMatch = content.match(/{[\\s\\S]*}/);\n      if (jsonMatch) parsed = JSON.parse(jsonMatch[0]);\n      else throw new Error('No valid JSON found');\n    }\n    return [...parsed.species, 'None'];\n  } catch (error) {\n    console.error('Species API Error:', error.message);\n    const fallback = cityState.includes('AL')\n      ? ['Largemouth Bass', 'Catfish', 'Crappie', 'Redfish', 'Bluegill']\n      : ['Largemouth Bass', 'Catfish', 'Rainbow Trout', 'Bluegill', 'Carp'];\n    return [...fallback, 'None'];\n  }\n};\n\nexport const getFishingAdvice = async (location, species, cityState, forecastData, waterData, speciesTempRange, timeOfDay) => {\n  const currentDate = new Date().toLocaleString('default', { month: 'long', year: 'numeric' });\n  const prompt = getAdvicePrompt(location, species, cityState, currentDate, forecastData, waterData, speciesTempRange, timeOfDay);\n  try {\n    const response = await axios.post(\n      'https://api.openai.com/v1/chat/completions',\n      {\n        model: 'gpt-4o-mini',\n        messages: [{ role: 'user', content: prompt }],\n        temperature: 0.3,\n      },\n      { headers: { 'Authorization': `Bearer ${OPENAI_API_KEY}` } }\n    );\n    const content = response.data.choices[0].message.content;\n    let parsed;\n    try {\n      parsed = JSON.parse(content);\n    } catch (e) {\n      const jsonMatch = content.match(/{[\\s\\S]*}/);\n      if (jsonMatch) parsed = JSON.parse(jsonMatch[0]);\n      else throw new Error('No valid JSON found');\n    }\n    return parsed;\n  } catch (error) {\n    console.error('Advice API Error:', error.message);\n    return {\n      bait: species && species !== 'None' ? 'Spinners or worms' : 'Worms',\n      strategy: 'Fish near cover or deep pools, adjusted for recent weather.',\n      tackle: {\n        rod: 'Medium 7\\' rod, moderate action',\n        line: '10 lb monofilament',\n      },\n      ...(species && species !== 'None' ? {} : { recommended_species: 'Trout' }),\n      additional_notes: 'Fallback due to API error.'\n    };\n  }\n};\n\nexport const getSpeciesTempRange = async (species) => {\n  if (!species || species === 'None') return { min: 60, max: 80 };\n  const prompt = `\nProvide the optimal water temperature range in Fahrenheit for fishing the species \"${species}\" in the United States or Canada. Return the response in the following JSON format:\n{\n  \"species\": \"${species}\",\n  \"optimal_temp_range_f\": {\n    \"min\": <minimum temperature in Fahrenheit>,\n    \"max\": <maximum temperature in Fahrenheit>\n  }\n}\nUse current knowledge of recreational fishing. If the species is not valid or data is unavailable, return a default range of 60-80\u00b0F. Strictly return the response as JSON only, with no additional text or Markdown formatting outside the JSON structure.\n`;\n  try {\n    const response = await axios.post(\n      'https://api.openai.com/v1/chat/completions',\n      {\n        model: 'gpt-4o-mini',\n        messages: [{ role: 'user', content: prompt }],\n        temperature: 0.2,\n      },\n      { headers: { 'Authorization': `Bearer ${OPENAI_API_KEY}` } }\n    );\n    const content = response.data.choices[0].message.content;\n    let parsed;\n    try {\n      parsed = JSON.parse(content);\n    } catch (e) {\n      const jsonMatch = content.match(/{[\\s\\S]*}/);\n      if (jsonMatch) parsed = JSON.parse(jsonMatch[0]);\n      else throw new Error('No valid JSON found');\n    }\n    return parsed.optimal_temp_range_f;\n  } catch (error) {\n    console.error('Temp Range API Error:', error.message);\n    return { min: 60, max: 80 };\n  }\n};"
        },
        {
            "name": "app",
            "type": "directory",
            "children": [
                {
                    "name": "confirm.js",
                    "type": "file",
                    "size": 2641,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "// app/confirm.js\nimport React, { useEffect, useState } from 'react';\nimport { View, Text, TouchableOpacity, ImageBackground } from 'react-native';\nimport { useRouter, useLocalSearchParams } from 'expo-router';\nimport { supabase } from '../services/supabaseClient';\nimport { GlobalStyles } from '../styles/GlobalStyles';\nimport AlertModal from '../components/AlertModal'; // Import the modal component\n\nexport default function ConfirmScreen() {\n  const router = useRouter();\n  const params = useLocalSearchParams();\n  const [status, setStatus] = useState('verifying');\n  const [alertVisible, setAlertVisible] = useState(false);\n  const [alertTitle, setAlertTitle] = useState('');\n  const [alertMessage, setAlertMessage] = useState('');\n\n  const showAlert = (title, message) => {\n    setAlertTitle(title);\n    setAlertMessage(message);\n    setAlertVisible(true);\n  };\n\n  const closeAlert = () => {\n    setAlertVisible(false);\n    if (alertTitle === 'Confirmation Failed' || alertTitle === 'Invalid Link') {\n      router.replace('/signup');\n    }\n  };\n\n  useEffect(() => {\n    const verify = async () => {\n      if (params.token && params.type === 'signup') {\n        const { error } = await supabase.auth.verifyOtp({\n          token: params.token,\n          type: 'signup',\n        });\n        setStatus(error ? 'error' : 'success');\n        if (error) {\n          showAlert('Confirmation Failed', 'Something went wrong. Please try again or contact support.');\n        }\n      } else {\n        setStatus('invalid');\n        showAlert('Invalid Link', 'This confirmation link is invalid or expired.');\n      }\n    };\n    verify();\n  }, [params]);\n\n  return (\n    <ImageBackground source={require('assets/angler-casting-reel-into-water.png')} style={GlobalStyles.background}>\n      <View style={GlobalStyles.loadingContainer}>\n        {status === 'verifying' && <Text style={GlobalStyles.title}>Verifying your account...</Text>}\n        {status === 'success' && (\n          <>\n            <Text style={GlobalStyles.title}>Welcome to ProAnglerAI!</Text>\n            <Text style={GlobalStyles.placeholder}>Your account is confirmed. Let\u2019s get fishing!</Text>\n            <TouchableOpacity style={GlobalStyles.customButton} onPress={() => router.replace('/')}>\n              <Text style={GlobalStyles.buttonText}>Go to Home</Text>\n            </TouchableOpacity>\n          </>\n        )}\n      </View>\n      <AlertModal\n        visible={alertVisible}\n        title={alertTitle}\n        message={alertMessage}\n        onClose={closeAlert}\n      />\n    </ImageBackground>\n  );\n}"
                },
                {
                    "name": "index.js",
                    "type": "file",
                    "size": 6500,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "import React, { useState, useEffect } from 'react';\nimport { View, Text, ImageBackground, KeyboardAvoidingView, Platform, ScrollView, TouchableOpacity, Image, Linking } from 'react-native';\nimport LocationToggle from '../components/LocationToggle';\nimport SpeciesPicker from '../components/SpeciesPicker';\nimport DateSelector from '../components/DateSelector';\nimport { GlobalStyles } from '../styles/GlobalStyles';\nimport { HomeStyles } from '../styles/HomeStyles';\nimport { useAuth } from '../hooks/useAuth';\nimport { useLocation } from '../hooks/useLocation';\nimport { useSpecies } from '../hooks/useSpecies';\nimport { useFormSubmission } from '../hooks/useFormSubmission';\nimport { supabase } from '../services/supabaseClient';\nimport * as ExpoLinking from 'expo-linking';\n\nexport default function HomeScreen() {\n  const { username, loading, handleLogout } = useAuth();\n  const { useCurrentLocation, setUseCurrentLocation, location, setLocation, cityState, manualCity, manualState, setManualCity, setManualState, isFetchingLocation, resolveManualLocation } = useLocation();\n  const { species, setSpecies, customSpecies, setCustomSpecies, speciesList, weatherData, isFetchingSpecies, handleFetchSpecies } = useSpecies();\n  const [date, setDate] = useState(new Date());\n  const [timeOfDay, setTimeOfDay] = useState('Morning');\n  const { isLoading, handleSubmit } = useFormSubmission(location, species, customSpecies, cityState, weatherData, date, timeOfDay);\n  const [isVerifying, setIsVerifying] = useState(false);\n\n  useEffect(() => {\n    const handleDeepLink = async (event) => {\n      const { path, queryParams } = ExpoLinking.parse(event.url);\n      if (path === 'auth/v1/verify' && queryParams.type === 'signup' && queryParams.token) {\n        setIsVerifying(true);\n        const { error } = await supabase.auth.verifyOtp({\n          token: queryParams.token,\n          type: 'signup',\n        });\n        setIsVerifying(false);\n        if (error) {\n          console.error('Verification Error:', error.message);\n          alert('Failed to confirm your account. Please try again or contact Patrick@ProAnglerAI.com for support.');\n        } else {\n          alert('Account confirmed! Please log in to start fishing smarter with ProAnglerAI.');\n        }\n      }\n    };\n\n    // Handle initial deep link when app opens\n    Linking.getInitialURL().then((url) => {\n      if (url) handleDeepLink({ url });\n    });\n\n    // Listen for deep links while app is running\n    const subscription = Linking.addEventListener('url', handleDeepLink);\n    return () => subscription.remove();\n  }, []);\n\n  const fetchSpecies = async () => {\n    let loc = location;\n    if (!useCurrentLocation) {\n      loc = await resolveManualLocation(`${manualCity}, ${manualState}`);\n      if (loc) setLocation(loc);\n    }\n    if (loc) {\n      await handleFetchSpecies(useCurrentLocation, cityState, manualCity, manualState, loc);\n    }\n  };\n\n  if (loading || isVerifying) {\n    return (\n      <View style={GlobalStyles.loadingContainer}>\n        <Text style={GlobalStyles.title}>{isVerifying ? 'Verifying your account...' : 'Loading...'}</Text>\n      </View>\n    );\n  }\n\n  console.log('HomeScreen Render Props:', {\n    username,\n    cityState,\n    species,\n    speciesList,\n    timeOfDay,\n    loading,\n    isLoading,\n    isFetchingSpecies,\n    isFetchingLocation,\n  });\n\n  return (\n    <ImageBackground source={require('assets/angler-casting-reel-into-water.png')} style={GlobalStyles.background}>\n      <KeyboardAvoidingView behavior={Platform.OS === 'ios' ? 'padding' : 'height'} style={GlobalStyles.keyboardAvoidingContainer}>\n        <ScrollView style={GlobalStyles.container} contentContainerStyle={GlobalStyles.scrollContent}>\n          <View style={GlobalStyles.content}>\n            <View style={GlobalStyles.header}>\n              <View style={HomeStyles.logoContainer}>\n                <Image source={require('assets/ProAnglerAI-WhiteBackground.png')} style={HomeStyles.logo} resizeMode=\"contain\" />\n              </View>\n              <Text style={GlobalStyles.title}>ProAnglerAI</Text>\n              <Text style={GlobalStyles.title}>Welcome {username || 'User'}</Text>\n            </View>\n            <LocationToggle\n              useCurrentLocation={useCurrentLocation}\n              setUseCurrentLocation={setUseCurrentLocation}\n              cityState={cityState || 'Loading...'}\n              manualCity={manualCity}\n              manualState={manualState}\n              setManualCity={setManualCity}\n              setManualState={setManualState}\n              isFetchingSpecies={isFetchingSpecies}\n              isFetchingLocation={isFetchingLocation}\n              handleFetchSpecies={fetchSpecies}\n            />\n            <SpeciesPicker\n              species={species}\n              setSpecies={setSpecies}\n              customSpecies={customSpecies}\n              setCustomSpecies={setCustomSpecies}\n              speciesList={speciesList}\n              isFetchingSpecies={isFetchingSpecies}\n            />\n            <DateSelector date={date} setDate={setDate} timeOfDay={timeOfDay} setTimeOfDay={setTimeOfDay} />\n            <View style={[HomeStyles.buttonSection, GlobalStyles.buttonSectionContainer]}>\n              <View style={GlobalStyles.buttonContainer}>\n                <TouchableOpacity\n                  style={[\n                    GlobalStyles.customButton,\n                    (isLoading || speciesList.length === 0 || (species === 'Other' && !customSpecies) || !location?.coords || !timeOfDay) && GlobalStyles.disabledButton,\n                  ]}\n                  onPress={handleSubmit}\n                  disabled={isLoading || speciesList.length === 0 || (species === 'Other' && !customSpecies) || !location?.coords || !timeOfDay}\n                >\n                  <Text style={GlobalStyles.buttonText}>{isLoading ? 'Loading...' : 'Get Fishing Tips'}</Text>\n                </TouchableOpacity>\n              </View>\n              <View style={GlobalStyles.buttonContainer}>\n                <TouchableOpacity style={[GlobalStyles.customButton, GlobalStyles.backButton]} onPress={handleLogout}>\n                  <Text style={GlobalStyles.buttonText}>Log Out</Text>\n                </TouchableOpacity>\n              </View>\n            </View>\n          </View>\n        </ScrollView>\n      </KeyboardAvoidingView>\n    </ImageBackground>\n  );\n}"
                },
                {
                    "name": "login.js",
                    "type": "file",
                    "size": 4435,
                    "modified": "Fri Apr 11 21:18:06 2025",
                    "content": "// app/login.js\nimport React, { useState } from 'react';\nimport { View, Text, TextInput, TouchableOpacity, ImageBackground, KeyboardAvoidingView, Platform, ScrollView, Image } from 'react-native';\nimport { supabase } from '../services/supabaseClient';\nimport { useRouter } from 'expo-router';\nimport { GlobalStyles } from '../styles/GlobalStyles';\nimport { LoginStyles } from '../styles/LoginStyles';\nimport { LocationToggleStyles } from '../styles/LocationToggleStyles';\nimport { HomeStyles } from '../styles/HomeStyles';\nimport AlertModal from '../components/AlertModal'; // Import the modal component\n\nexport default function LoginScreen() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [alertVisible, setAlertVisible] = useState(false);\n  const [alertTitle, setAlertTitle] = useState('');\n  const [alertMessage, setAlertMessage] = useState('');\n  const router = useRouter();\n\n  const showAlert = (title, message) => {\n    setAlertTitle(title);\n    setAlertMessage(message);\n    setAlertVisible(true);\n  };\n\n  const closeAlert = () => {\n    setAlertVisible(false);\n  };\n\n  const handleLogin = async () => {\n    setLoading(true);\n    const { error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n    setLoading(false);\n\n    if (error) {\n      showAlert('Error', error.message);\n    } else {\n      router.replace('/');\n    }\n  };\n\n  const handleSignUp = () => {\n    router.push('/signup');\n  };\n\n  return (\n    <ImageBackground source={require('assets/angler-casting-reel-into-water.png')} style={GlobalStyles.background}>\n      <KeyboardAvoidingView behavior={Platform.OS === 'ios' ? 'padding' : 'height'} style={GlobalStyles.keyboardAvoidingContainer}>\n        <ScrollView style={GlobalStyles.container} contentContainerStyle={GlobalStyles.scrollContent}>\n          <View style={GlobalStyles.content}>\n            <View style={GlobalStyles.header}>\n              <View style={HomeStyles.logoContainer}>\n                <Image\n                  source={require('assets/ProAnglerAI-WhiteBackground.png')}\n                  style={HomeStyles.logo}\n                  resizeMode=\"contain\"\n                />\n              </View>\n              \n              \n            </View>\n\n            <View style={LoginStyles.containerLogin}>\n              <View style={LoginStyles.inputLoginSection}>\n                <TextInput\n                  style={LocationToggleStyles.input}\n                  placeholder=\"Email\"\n                  value={email}\n                  onChangeText={setEmail}\n                  keyboardType=\"email-address\"\n                  autoCapitalize=\"none\"\n                  placeholderTextColor=\"#999\"\n                />\n                <TextInput\n                  style={LocationToggleStyles.input}\n                  placeholder=\"Password\"\n                  value={password}\n                  onChangeText={setPassword}\n                  secureTextEntry\n                  placeholderTextColor=\"#999\"\n                />\n              </View>\n              <View style={GlobalStyles.buttonContainer}>\n                <TouchableOpacity\n                  style={[GlobalStyles.customButton, loading && GlobalStyles.disabledButton]}\n                  onPress={handleLogin}\n                  disabled={loading}\n                >\n                  <Text style={GlobalStyles.buttonText}>\n                    {loading ? 'Loading...' : 'Login'}\n                  </Text>\n                </TouchableOpacity>\n              </View>\n              <View style={GlobalStyles.buttonContainer}>\n                <TouchableOpacity\n                  style={[GlobalStyles.customButton, loading && GlobalStyles.disabledButton]}\n                  onPress={handleSignUp}\n                  disabled={loading}\n                >\n                  <Text style={GlobalStyles.buttonText}>\n                    {loading ? 'Loading...' : 'Sign Up'}\n                  </Text>\n                </TouchableOpacity>\n              </View>\n            </View>\n          </View>\n        </ScrollView>\n      </KeyboardAvoidingView>\n      <AlertModal\n        visible={alertVisible}\n        title={alertTitle}\n        message={alertMessage}\n        onClose={closeAlert}\n      />\n    </ImageBackground>\n  );\n}"
                },
                {
                    "name": "results.js",
                    "type": "file",
                    "size": 9950,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "// app/results.js\nimport React, { useMemo, useState } from 'react';\nimport { useLocalSearchParams, useRouter } from 'expo-router';\nimport {\n  ScrollView,\n  View,\n  Text,\n  ImageBackground,\n  ActivityIndicator,\n  TouchableOpacity,\n} from 'react-native';\nimport { formatDate } from '../utils/dateUtils';\nimport { GlobalStyles } from '../styles/GlobalStyles';\nimport { ResultsStyles } from '../styles/ResultsStyles';\nimport { useFishingData } from '../hooks/useFishingData';\nimport { supabase } from '../services/supabaseClient';\nimport AlertModal from '../components/AlertModal'; // Import the modal component\n\nexport default function ResultsScreen() {\n  const router = useRouter();\n  const params = useLocalSearchParams();\n\n  const location = useMemo(() => (params.location ? JSON.parse(params.location) : null), [params.location]);\n  const weatherData = useMemo(() => (params.weatherData ? JSON.parse(params.weatherData) : null), [params.weatherData]);\n  const { species, cityState, date, timeOfDay } = params;\n\n  const { advice, forecastData, waterData, tempRange, loading, error } = useFishingData(\n    location,\n    species,\n    cityState,\n    date,\n    weatherData,\n    timeOfDay\n  );\n\n  const [feedbackSubmitted, setFeedbackSubmitted] = useState(false);\n  const [alertVisible, setAlertVisible] = useState(false);\n  const [alertTitle, setAlertTitle] = useState('');\n  const [alertMessage, setAlertMessage] = useState('');\n\n  const showAlert = (title, message) => {\n    setAlertTitle(title);\n    setAlertMessage(message);\n    setAlertVisible(true);\n  };\n\n  const closeAlert = () => {\n    setAlertVisible(false);\n  };\n\n  const handleFeedback = async (wasHelpful) => {\n    try {\n      const { error } = await supabase.from('feedback').insert([\n        {\n          user_id: (await supabase.auth.getUser()).data.user.id,\n          species: species,\n          city_state: cityState,\n          date: date,\n          time_of_day: timeOfDay,\n          advice: advice,\n          was_helpful: wasHelpful,\n          created_at: new Date().toISOString(),\n        },\n      ]);\n      if (error) throw error;\n      setFeedbackSubmitted(true);\n      showAlert('Thank You', 'Your feedback has been submitted!');\n    } catch (error) {\n      console.error('Feedback Error:', error.message);\n      showAlert('Error', 'Failed to submit feedback. Please try again.');\n    }\n  };\n\n  if (loading) {\n    return (\n      <ImageBackground source={require('assets/angler-casting-reel-into-water.png')} style={GlobalStyles.background}>\n        <View style={GlobalStyles.loadingContainer}>\n          <ActivityIndicator size=\"large\" color=\"#fff\" />\n        </View>\n      </ImageBackground>\n    );\n  }\n\n  const parsedDate = new Date(`${date}T00:00:00`);\n\n  return (\n    <ImageBackground source={require('assets/angler-casting-reel-into-water.png')} style={GlobalStyles.background}>\n      <ScrollView style={GlobalStyles.container}>\n        <View style={GlobalStyles.header}>\n          <Text style={GlobalStyles.title}>Fishing Advice for {cityState} - {species || 'Unknown Species'}</Text>\n        </View>\n        <View style={ResultsStyles.forecastSection}>\n          {forecastData?.forecastMetrics ? (\n            <View style={ResultsStyles.forecastCard}>\n              <Text style={ResultsStyles.forecastField}>\n                <Text style={GlobalStyles.label}>Date: </Text>{formatDate(date)} ({timeOfDay})\n              </Text>\n              <Text style={ResultsStyles.forecastField}>\n                <Text style={GlobalStyles.label}>Temperature: </Text>\n                {forecastData.forecastMetrics.lowTempF !== undefined && forecastData.forecastMetrics.highTempF !== undefined\n                  ? `${Math.round(forecastData.forecastMetrics.lowTempF)}\u2013${Math.round(forecastData.forecastMetrics.highTempF)}\u00b0F`\n                  : 'N/A'}\n              </Text>\n              <Text style={ResultsStyles.forecastField}>\n                <Text style={GlobalStyles.label}>Temp Trend: </Text>\n                {forecastData.forecastMetrics.tempTrend || 'N/A'}\n              </Text>\n              <Text style={ResultsStyles.forecastField}>\n                <Text style={GlobalStyles.label}>Precipitation: </Text>\n                {forecastData.forecastMetrics.totalPrecipIn !== undefined\n                  ? `${Math.round(forecastData.forecastMetrics.totalPrecipIn)} in`\n                  : 'N/A'}\n              </Text>\n              <Text style={ResultsStyles.forecastField}>\n                <Text style={GlobalStyles.label}>Wind Speed: </Text>\n                {forecastData.forecastMetrics.avgWindMph !== undefined\n                  ? `${Math.round(forecastData.forecastMetrics.avgWindMph)} mph`\n                  : 'N/A'}\n              </Text>\n              <Text style={ResultsStyles.forecastField}>\n                <Text style={GlobalStyles.label}>Cloud Cover: </Text>\n                {forecastData.forecastMetrics.cloudCover !== undefined\n                  ? `${forecastData.forecastMetrics.cloudCover}% `\n                  : 'N/A '}\n                ({forecastData.forecastMetrics.cloudCover !== undefined\n                  ? forecastData.forecastMetrics.cloudCover >= 70\n                    ? 'Overcast'\n                    : forecastData.forecastMetrics.cloudCover >= 30\n                    ? 'Partly Cloudy'\n                    : 'Clear'\n                  : 'N/A'})\n              </Text>\n              <Text style={ResultsStyles.forecastField}>\n                <Text style={GlobalStyles.label}>Humidity: </Text>\n                {forecastData.forecastMetrics.humidity !== undefined\n                  ? `${forecastData.forecastMetrics.humidity}%`\n                  : 'N/A'}\n              </Text>\n              {waterData?.waterTempF && (\n                <Text style={ResultsStyles.forecastField}>\n                  <Text style={GlobalStyles.label}>Water Temp: </Text>\n                  {waterData.waterTempF.toFixed(1)}\u00b0F {parsedDate > new Date() ? '(forecasted)' : ''}\n                </Text>\n              )}\n              {waterData?.gageHeightFt && (\n                <Text style={ResultsStyles.forecastField}>\n                  <Text style={GlobalStyles.label}>Water Level: </Text>\n                  {waterData.gageHeightFt.toFixed(1)} ft {parsedDate > new Date() ? '(forecasted)' : ''}\n                </Text>\n              )}\n              {waterData?.clarity && (\n                <Text style={ResultsStyles.forecastField}>\n                  <Text style={GlobalStyles.label}>Water Clarity: </Text>{waterData.clarity}\n                </Text>\n              )}\n              {waterData?.flowRateCfs && (\n                <Text style={ResultsStyles.forecastField}>\n                  <Text style={GlobalStyles.label}>Flow Rate: </Text>{waterData.flowRateCfs} CFS\n                </Text>\n              )}\n              <Text style={ResultsStyles.forecastField}>\n                <Text style={GlobalStyles.label}>Fishing Conditions: </Text>\n                {'\u2605'.repeat(forecastData.forecastMetrics.rating)}{'\u2606'.repeat(5 - forecastData.forecastMetrics.rating)}\n              </Text>\n            </View>\n          ) : error ? (\n            <Text style={ResultsStyles.errorText}>Error: {error}</Text>\n          ) : (\n            <Text style={ResultsStyles.errorText}>Unable to load forecast data.</Text>\n          )}\n        </View>\n        <View style={GlobalStyles.content}>\n          <View style={ResultsStyles.adviceSection}>\n            <View style={ResultsStyles.adviceCard}>\n              {advice && (\n                <>\n                  <Text style={ResultsStyles.field}><Text style={GlobalStyles.label}>Bait: </Text>{advice.bait || 'Not specified'}</Text>\n                  <Text style={ResultsStyles.field}><Text style={GlobalStyles.label}>Strategy: </Text>{advice.strategy || 'Not specified'}</Text>\n                  {advice.tackle && (\n                    <Text style={ResultsStyles.field}>\n                      <Text style={GlobalStyles.label}>Tackle: </Text>\n                      Rod: {advice.tackle.rod || 'Not specified'}, Line: {advice.tackle.line || 'Not specified'}\n                    </Text>\n                  )}\n                  {advice.additional_notes && (\n                    <Text style={ResultsStyles.field}><Text style={GlobalStyles.label}>Additional Notes: </Text>{advice.additional_notes}</Text>\n                  )}\n                </>\n              )}\n            </View>\n            {!feedbackSubmitted && (\n              <View style={ResultsStyles.feedbackSection}>\n                <Text style={ResultsStyles.feedbackLabel}>Was this advice helpful?</Text>\n                <View style={ResultsStyles.feedbackButtonContainer}>\n                  <TouchableOpacity\n                    style={[GlobalStyles.customButton, ResultsStyles.feedbackButton]}\n                    onPress={() => handleFeedback(true)}\n                  >\n                    <Text style={GlobalStyles.buttonText}>Yes</Text>\n                  </TouchableOpacity>\n                  <TouchableOpacity\n                    style={[GlobalStyles.customButton, ResultsStyles.feedbackButton]}\n                    onPress={() => handleFeedback(false)}\n                  >\n                    <Text style={GlobalStyles.buttonText}>No</Text>\n                  </TouchableOpacity>\n                </View>\n              </View>\n            )}\n          </View>\n          <TouchableOpacity style={GlobalStyles.backButton} onPress={() => router.back()}>\n            <Text style={GlobalStyles.buttonText}>Back to Home</Text>\n          </TouchableOpacity>\n        </View>\n      </ScrollView>\n      <AlertModal\n        visible={alertVisible}\n        title={alertTitle}\n        message={alertMessage}\n        onClose={closeAlert}\n      />\n    </ImageBackground>\n  );\n}"
                },
                {
                    "name": "signup.js",
                    "type": "file",
                    "size": 6843,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "// app/signup.js (modified)\nimport React, { useState } from 'react';\nimport { View, TextInput, TouchableOpacity, Text, ImageBackground, KeyboardAvoidingView, Platform, ScrollView, Image } from 'react-native';\nimport { useRouter } from 'expo-router';\nimport { supabase } from '../services/supabaseClient';\nimport { GlobalStyles } from '../styles/GlobalStyles';\nimport { SignUpStyles } from '../styles/SignUpStyles';\nimport { LocationToggleStyles } from '../styles/LocationToggleStyles';\nimport { HomeStyles } from '../styles/HomeStyles';\nimport AlertModal from '../components/AlertModal';\n\nexport default function SignUpScreen() {\n  const [firstName, setFirstName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [alertVisible, setAlertVisible] = useState(false);\n  const [alertTitle, setAlertTitle] = useState('');\n  const [alertMessage, setAlertMessage] = useState('');\n  const router = useRouter();\n\n  const showAlert = (title, message) => {\n    setAlertTitle(title);\n    setAlertMessage(message);\n    setAlertVisible(true);\n  };\n\n  const closeAlert = () => {\n    setAlertVisible(false);\n  };\n\n  const validateInputs = () => {\n    const nameRegex = /^[A-Za-z\\s]+$/;\n    if (!firstName.trim()) {\n      showAlert('Error', 'First Name is required.');\n      return false;\n    }\n    if (!nameRegex.test(firstName)) {\n      showAlert('Error', 'First Name should only contain letters and spaces.');\n      return false;\n    }\n\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!email.trim()) {\n      showAlert('Error', 'Email is required.');\n      return false;\n    }\n    if (!emailRegex.test(email)) {\n      showAlert('Error', 'Please enter a valid email address.');\n      return false;\n    }\n\n    const passwordRegex = /^(?=.*[0-9])(?=.*[!@#$%^&*])[A-Za-z\\d!@#$%^&*]{8,}$/;\n    if (!password) {\n      showAlert('Error', 'Password is required.');\n      return false;\n    }\n    if (!passwordRegex.test(password)) {\n      showAlert(\n        'Error',\n        'Password must be at least 8 characters long and include at least one number and one special character (e.g., !@#$%^&*).'\n      );\n      return false;\n    }\n\n    return true;\n  };\n\n  const checkEmailExists = async (emailToCheck) => {\n    try {\n      const { data, error } = await supabase.rpc('check_email_exists', { email_to_check: emailToCheck });\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error checking email:', error.message);\n      showAlert('Error', 'Failed to verify email availability. Please try again.');\n      return null;\n    }\n  };\n\n  const handleSignUp = async () => {\n    if (!validateInputs()) return;\n    setLoading(true);\n\n    const emailExists = await checkEmailExists(email);\n    if (emailExists === null) {\n      setLoading(false);\n      return;\n    }\n    if (emailExists) {\n      showAlert('Error', 'An account with this email already exists.');\n      setLoading(false);\n      return;\n    }\n\n    const { data, error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: { data: { first_name: firstName, username: firstName } },\n    });\n\n    setLoading(false);\n\n    if (error) {\n      showAlert('Error', error.message);\n    } else if (data.user) {\n      showAlert('Success', 'Sign-up successful! Please check your email to confirm your account, then log in.');\n      router.replace('/login');\n    } else {\n      showAlert('Error', 'Sign-up failed. Please try again.');\n    }\n  };\n\n  return (\n    <ImageBackground source={require('assets/angler-casting-reel-into-water.png')} style={GlobalStyles.background}>\n      <KeyboardAvoidingView behavior={Platform.OS === 'ios' ? 'padding' : 'height'} style={GlobalStyles.keyboardAvoidingContainer}>\n        <ScrollView style={GlobalStyles.container} contentContainerStyle={GlobalStyles.scrollContent}>\n          <View style={GlobalStyles.content}>\n            <View style={GlobalStyles.header}>\n              <View style={HomeStyles.logoContainer}>\n                <Image\n                  source={require('assets/ProAnglerAI-WhiteBackground.png')}\n                  style={HomeStyles.logo}\n                  resizeMode=\"contain\"\n                />\n              </View>\n              <Text style={GlobalStyles.title}>ProAnglerAI</Text>\n              <Text style={GlobalStyles.title}>Sign Up</Text>\n            </View>\n\n            <View style={SignUpStyles.containerSignUp}>\n              <View style={SignUpStyles.inputSignUpSection}>\n                <TextInput\n                  style={LocationToggleStyles.input}\n                  placeholder=\"First Name\"\n                  value={firstName}\n                  onChangeText={setFirstName}\n                  autoCapitalize=\"words\"\n                  placeholderTextColor=\"#999\"\n                />\n                <TextInput\n                  style={LocationToggleStyles.input}\n                  placeholder=\"Email\"\n                  value={email}\n                  onChangeText={setEmail}\n                  keyboardType=\"email-address\"\n                  autoCapitalize=\"none\"\n                  placeholderTextColor=\"#999\"\n                />\n                <TextInput\n                  style={LocationToggleStyles.input}\n                  placeholder=\"Password\"\n                  value={password}\n                  onChangeText={setPassword}\n                  secureTextEntry\n                  placeholderTextColor=\"#999\"\n                />\n              </View>\n              <View style={GlobalStyles.buttonContainer}>\n                <TouchableOpacity\n                  style={[GlobalStyles.customButton, loading && GlobalStyles.disabledButton]}\n                  onPress={handleSignUp}\n                  disabled={loading}\n                >\n                  <Text style={GlobalStyles.buttonText}>\n                    {loading ? 'Loading...' : 'Sign Up'}\n                  </Text>\n                </TouchableOpacity>\n              </View>\n              <View style={GlobalStyles.buttonContainer}>\n                <TouchableOpacity\n                  style={[GlobalStyles.customButton, GlobalStyles.backButton]}\n                  onPress={() => router.replace('/login')}\n                >\n                  <Text style={GlobalStyles.buttonText}>Back to Login</Text>\n                </TouchableOpacity>\n              </View>\n            </View>\n          </View>\n        </ScrollView>\n      </KeyboardAvoidingView>\n      <AlertModal\n        visible={alertVisible}\n        title={alertTitle}\n        message={alertMessage}\n        onClose={closeAlert}\n      />\n    </ImageBackground>\n  );\n}"
                }
            ]
        },
        {
            "name": "Archive",
            "type": "directory",
            "children": [
                {
                    "name": "App.js",
                    "type": "file",
                    "size": 656,
                    "modified": "Sun Mar 23 14:56:46 2025",
                    "content": "import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport HomeScreen from '../app/HomeScreen';\nimport ResultsScreen from '../app/ResultsScreen';\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName=\"Home\">\n        <Stack.Screen name=\"Home\" component={HomeScreen} options={{ headerShown: false }} />\n        <Stack.Screen name=\"Results\" component={ResultsScreen} options={{ headerShown: false }} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}"
                }
            ]
        },
        {
            "name": "components",
            "type": "directory",
            "children": [
                {
                    "name": "AlertModal.js",
                    "type": "file",
                    "size": 931,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "// components/AlertModal.js (updated)\nimport React from 'react';\nimport { Modal, View, Text, TouchableOpacity } from 'react-native';\nimport { GlobalStyles } from '../styles/GlobalStyles';\nimport { AlertModalStyles } from '../styles/AlertModalStyles';\n\nexport default function AlertModal({ visible, title, message, onClose }) {\n  return (\n    <Modal\n      animationType=\"fade\"\n      transparent={true}\n      visible={visible}\n      onRequestClose={onClose}\n    >\n      <View style={GlobalStyles.modalOverlay}>\n        <View style={GlobalStyles.modalContent}>\n          <Text style={AlertModalStyles.title}>{title}</Text>\n          <Text style={AlertModalStyles.message}>{message}</Text>\n          <TouchableOpacity style={GlobalStyles.customButton} onPress={onClose}>\n            <Text style={GlobalStyles.buttonText}>OK</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </Modal>\n  );\n}"
                },
                {
                    "name": "DateSelector.js",
                    "type": "file",
                    "size": 7796,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "import React, { useState } from 'react';\nimport { View, Text, TouchableOpacity, Modal, FlatList } from 'react-native';\nimport { GlobalStyles } from '../styles/GlobalStyles';\nimport { DateSelectorStyles } from '../styles/DateSelectorStyles';\n\nconst DateSelector = ({ date, setDate, timeOfDay, setTimeOfDay }) => {\n  const minDate = new Date();\n  minDate.setHours(0, 0, 0, 0);\n  const maxDate = new Date();\n  maxDate.setDate(maxDate.getDate() + 7);\n  maxDate.setHours(0, 0, 0, 0);\n\n  const [modalVisible, setModalVisible] = useState(false);\n  const [timeModalVisible, setTimeModalVisible] = useState(false);\n  const timeOptions = ['Morning', 'Midday', 'Evening'];\n  const [timeIndex, setTimeIndex] = useState(timeOptions.indexOf(timeOfDay));\n\n  const adjustDate = (days) => {\n    const newDate = new Date(date);\n    newDate.setDate(newDate.getDate() + days);\n    newDate.setHours(0, 0, 0, 0);\n    if (newDate >= minDate && newDate <= maxDate) {\n      console.log('Selected Date (Button):', newDate.toISOString().split('T')[0]);\n      setDate(newDate);\n    }\n  };\n\n  const adjustTime = (direction) => {\n    let newIndex = timeIndex + direction;\n    if (newIndex < 0) newIndex = timeOptions.length - 1;\n    if (newIndex >= timeOptions.length) newIndex = 0;\n    setTimeIndex(newIndex);\n    setTimeOfDay(timeOptions[newIndex]);\n  };\n\n  const formatDateDisplay = (d) => {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(today.getDate() + 1);\n\n    if (d.toDateString() === today.toDateString()) return 'Today';\n    if (d.toDateString() === tomorrow.toDateString()) return 'Tomorrow';\n    return d.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' });\n  };\n\n  const getAvailableDates = () => {\n    const dates = [];\n    let currentDate = new Date(minDate);\n    while (currentDate <= maxDate) {\n      dates.push(new Date(currentDate));\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    return dates;\n  };\n\n  const availableDates = getAvailableDates();\n\n  const handleSelectDate = (selectedDate) => {\n    setDate(selectedDate);\n    setModalVisible(false);\n  };\n\n  const handleSelectTime = (selectedTime) => {\n    setTimeOfDay(selectedTime);\n    setTimeIndex(timeOptions.indexOf(selectedTime));\n    setTimeModalVisible(false);\n  };\n\n  console.log('DateSelector Render:', { date: date.toISOString(), timeOfDay });\n\n  return (\n    <View style={DateSelectorStyles.dateSection}>\n      <Text style={GlobalStyles.label}>Select Fishing Trip Date and Time</Text>\n      <View style={[DateSelectorStyles.dateButtonContainer, DateSelectorStyles.selectorContainer]}>\n        <TouchableOpacity\n          style={[\n            DateSelectorStyles.dateArrowButton,\n            date <= minDate && GlobalStyles.disabledButton,\n          ]}\n          onPress={() => adjustDate(-1)}\n          disabled={date <= minDate}\n        >\n          <Text style={GlobalStyles.buttonText}>\u25c4</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={[DateSelectorStyles.dateDisplay, DateSelectorStyles.selectorDisplay]}\n          onPress={() => setModalVisible(true)}\n        >\n          <Text style={DateSelectorStyles.dateText}>{formatDateDisplay(date)}</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={[\n            DateSelectorStyles.dateArrowButton,\n            date >= maxDate && GlobalStyles.disabledButton,\n          ]}\n          onPress={() => adjustDate(1)}\n          disabled={date >= maxDate}\n        >\n          <Text style={GlobalStyles.buttonText}>\u25ba</Text>\n        </TouchableOpacity>\n      </View>\n\n      <View style={[DateSelectorStyles.dateButtonContainer, DateSelectorStyles.selectorContainer, DateSelectorStyles.timeSelectorContainer]}>\n        <TouchableOpacity\n          style={[\n            DateSelectorStyles.dateArrowButton,\n            timeIndex === 0 && GlobalStyles.disabledButton,\n          ]}\n          onPress={() => adjustTime(-1)}\n          disabled={timeIndex === 0}\n        >\n          <Text style={GlobalStyles.buttonText}>\u25c4</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={[DateSelectorStyles.dateDisplay, DateSelectorStyles.selectorDisplay]}\n          onPress={() => setTimeModalVisible(true)}\n        >\n          <Text style={DateSelectorStyles.dateText}>{timeOfDay}</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={[\n            DateSelectorStyles.dateArrowButton,\n            timeIndex === timeOptions.length - 1 && GlobalStyles.disabledButton,\n          ]}\n          onPress={() => adjustTime(1)}\n          disabled={timeIndex === timeOptions.length - 1}\n        >\n          <Text style={GlobalStyles.buttonText}>\u25ba</Text>\n        </TouchableOpacity>\n      </View>\n\n      <Modal\n        animationType=\"fade\"\n        transparent={true}\n        visible={modalVisible}\n        onRequestClose={() => setModalVisible(false)}\n      >\n        <View style={GlobalStyles.modalOverlay}>\n          <View style={GlobalStyles.modalContent}>\n            <FlatList\n              data={availableDates}\n              keyExtractor={(item) => item.toISOString()}\n              renderItem={({ item }) => (\n                <TouchableOpacity\n                  style={[\n                    GlobalStyles.dateItem,\n                    item.toDateString() === date.toDateString() && GlobalStyles.selectedDateItem,\n                  ]}\n                  onPress={() => handleSelectDate(item)}\n                >\n                  <Text\n                    style={[\n                      GlobalStyles.dateItemText,\n                      item.toDateString() === date.toDateString() && GlobalStyles.selectedDateItemText,\n                    ]}\n                  >\n                    {formatDateDisplay(item)}\n                  </Text>\n                </TouchableOpacity>\n              )}\n            />\n            <TouchableOpacity\n              style={GlobalStyles.customButton}\n              onPress={() => setModalVisible(false)}\n            >\n              <Text style={GlobalStyles.buttonText}>Close</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </Modal>\n\n      <Modal\n        animationType=\"fade\"\n        transparent={true}\n        visible={timeModalVisible}\n        onRequestClose={() => setTimeModalVisible(false)}\n      >\n        <View style={GlobalStyles.modalOverlay}>\n          <View style={GlobalStyles.modalContent}>\n            <FlatList\n              data={timeOptions}\n              keyExtractor={(item) => item}\n              renderItem={({ item }) => (\n                <TouchableOpacity\n                  style={[\n                    GlobalStyles.dropdownItem,\n                    item === timeOfDay && GlobalStyles.selectedDateItem,\n                  ]}\n                  onPress={() => handleSelectTime(item)}\n                >\n                  <Text\n                    style={[\n                      GlobalStyles.dropdownItemText,\n                      item === timeOfDay && GlobalStyles.selectedDateItemText,\n                    ]}\n                  >\n                    {item}\n                  </Text>\n                </TouchableOpacity>\n              )}\n            />\n            <TouchableOpacity\n              style={GlobalStyles.customButton}\n              onPress={() => setTimeModalVisible(false)}\n            >\n              <Text style={GlobalStyles.buttonText}>Close</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </Modal>\n    </View>\n  );\n};\n\nexport default DateSelector;"
                },
                {
                    "name": "FishingTips.js",
                    "type": "file",
                    "size": 0,
                    "modified": "Fri Feb 21 15:22:40 2025",
                    "content": ""
                },
                {
                    "name": "LocationToggle.js",
                    "type": "file",
                    "size": 3175,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "import React from 'react';\nimport { View, Text, TextInput, Switch, TouchableOpacity } from 'react-native';\nimport { GlobalStyles } from '../styles/GlobalStyles';\nimport { LocationToggleStyles } from '../styles/LocationToggleStyles';\n\nconst LocationToggle = ({\n  useCurrentLocation,\n  setUseCurrentLocation,\n  cityState,\n  manualCity,\n  manualState,\n  setManualCity,\n  setManualState,\n  isFetchingSpecies,\n  isFetchingLocation,\n  handleFetchSpecies,\n}) => {\n  const isButtonDisabled = useCurrentLocation\n    ? isFetchingSpecies || isFetchingLocation || cityState === 'Location unavailable' || cityState === 'Location permission denied'\n    : isFetchingSpecies || !manualCity || !manualState;\n\n  console.log('LocationToggle Render:', { cityState, isFetchingLocation });\n\n  return (\n    <View style={[LocationToggleStyles.locationSection]}>\n      <Text style={GlobalStyles.label}>Where are you going fishing?</Text>\n      {useCurrentLocation ? (\n        <View>\n          <Text style={LocationToggleStyles.locationText}>\n            {isFetchingLocation ? 'Fetching location...' : (cityState || 'Location not available')}\n          </Text>\n          <View style={LocationToggleStyles.toggleContainer}>\n            <Text style={LocationToggleStyles.toggleLabel}>Use Current Location</Text>\n            <Switch\n              value={useCurrentLocation}\n              onValueChange={setUseCurrentLocation}\n              trackColor={{ false: '#767577', true: '#00CED1' }}\n              thumbColor={useCurrentLocation ? '#fff' : '#f4f3f4'}\n            />\n          </View>\n        </View>\n      ) : (\n        <View style={LocationToggleStyles.manualLocationContainer}>\n          <TextInput\n            style={LocationToggleStyles.input}\n            placeholder=\"City\"\n            value={manualCity}\n            onChangeText={setManualCity}\n            placeholderTextColor=\"#999\"\n          />\n          <TextInput\n            style={LocationToggleStyles.input}\n            placeholder=\"State (e.g., AL)\"\n            value={manualState}\n            onChangeText={setManualState}\n            placeholderTextColor=\"#999\"\n          />\n          <View style={LocationToggleStyles.toggleContainer}>\n            <Text style={LocationToggleStyles.toggleLabel}>Use Current Location</Text>\n            <Switch\n              value={useCurrentLocation}\n              onValueChange={setUseCurrentLocation}\n              trackColor={{ false: '#767577', true: '#00CED1' }}\n              thumbColor={useCurrentLocation ? '#fff' : '#f4f3f4'}\n            />\n          </View>\n        </View>\n      )}\n      <View style={[GlobalStyles.buttonContainer, GlobalStyles.buttonSectionContainer]}>\n        <TouchableOpacity\n          style={[GlobalStyles.customButton, isButtonDisabled && GlobalStyles.disabledButton]}\n          onPress={handleFetchSpecies}\n          disabled={isButtonDisabled}\n        >\n          <Text style={GlobalStyles.buttonText}>\n            {isFetchingSpecies ? 'Loading...' : 'Get Species'}\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nexport default LocationToggle;"
                },
                {
                    "name": "SettingsScreen.js",
                    "type": "file",
                    "size": 0,
                    "modified": "Fri Feb 21 15:22:23 2025",
                    "content": ""
                },
                {
                    "name": "SpeciesPicker.js",
                    "type": "file",
                    "size": 3055,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "import React from 'react';\nimport { View, Text, TextInput, TouchableOpacity, Modal, FlatList } from 'react-native';\nimport { GlobalStyles } from '../styles/GlobalStyles';\nimport { SpeciesPickerStyles } from '../styles/SpeciesPickerStyles';\nimport { LocationToggleStyles } from '../styles/LocationToggleStyles';\n\nconst SpeciesPicker = ({\n  species,\n  setSpecies,\n  customSpecies,\n  setCustomSpecies,\n  speciesList,\n  isFetchingSpecies,\n}) => {\n  const [modalVisible, setModalVisible] = React.useState(false);\n\n  const handleSelectSpecies = (selectedSpecies) => {\n    setSpecies(selectedSpecies);\n    setModalVisible(false);\n  };\n\n  console.log('SpeciesPicker Render:', { species, speciesList, isFetchingSpecies });\n\n  return (\n    <View style={SpeciesPickerStyles.speciesSection}>\n      <Text style={GlobalStyles.label}>Select Species</Text>\n      <TouchableOpacity\n        style={SpeciesPickerStyles.dropdownButton}\n        onPress={() => setModalVisible(true)}\n        disabled={isFetchingSpecies || speciesList.length === 0}\n      >\n        <Text style={SpeciesPickerStyles.dropdownText}>\n          {isFetchingSpecies\n            ? 'Loading species...'\n            : speciesList.length === 0\n            ? 'No species available'\n            : species || 'Select a species'}\n        </Text>\n      </TouchableOpacity>\n\n      {species === 'Other' && (\n        <TextInput\n          style={LocationToggleStyles.input}\n          placeholder=\"Enter custom species\"\n          value={customSpecies}\n          onChangeText={setCustomSpecies}\n          placeholderTextColor=\"#999\"\n        />\n      )}\n\n      <Modal\n        animationType=\"fade\"\n        transparent={true}\n        visible={modalVisible}\n        onRequestClose={() => setModalVisible(false)}\n      >\n        <View style={GlobalStyles.modalOverlay}>\n          <View style={GlobalStyles.modalContent}>\n            <FlatList\n              data={speciesList}\n              keyExtractor={(item) => item}\n              renderItem={({ item }) => (\n                <TouchableOpacity\n                  style={[\n                    GlobalStyles.dropdownItem,\n                    item === species && GlobalStyles.selectedDateItem,\n                  ]}\n                  onPress={() => handleSelectSpecies(item)}\n                >\n                  <Text\n                    style={[\n                      GlobalStyles.dropdownItemText,\n                      item === species && GlobalStyles.selectedDateItemText,\n                    ]}\n                  >\n                    {item}\n                  </Text>\n                </TouchableOpacity>\n              )}\n            />\n            <TouchableOpacity\n              style={GlobalStyles.customButton}\n              onPress={() => setModalVisible(false)}\n            >\n              <Text style={GlobalStyles.buttonText}>Close</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </Modal>\n    </View>\n  );\n};\n\nexport default SpeciesPicker;"
                }
            ]
        },
        {
            "name": "hooks",
            "type": "directory",
            "children": [
                {
                    "name": "useAuth.js",
                    "type": "file",
                    "size": 2145,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "// hooks/useAuth.js\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'expo-router';\nimport { supabase } from '../services/supabaseClient';\n\nexport const useAuth = () => {\n  const router = useRouter();\n  const [session, setSession] = useState(null);\n  const [username, setUsername] = useState('');\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const { data: { session } } = await supabase.auth.getSession();\n      setSession(session);\n\n      if (session) {\n        // Fetch username from auth.users metadata\n        const { data: userData, error: userError } = await supabase.auth.getUser();\n        let userName = 'User';\n        if (!userError && userData.user.user_metadata.username) {\n          userName = userData.user.user_metadata.username;\n          setUsername(userName);\n        }\n\n        // Fetch the user's profile\n        const { data: profileData, error: profileError } = await supabase\n          .from('profiles')\n          .select('username')\n          .eq('id', session.user.id)\n          .single();\n\n        if (profileData) {\n          // Profile exists, use its username if auth metadata is missing\n          if (!userData.user.user_metadata.username) {\n            setUsername(profileData.username || 'User');\n          }\n        } else if (profileError) {\n          console.error('Error fetching profile:', profileError.message);\n        }\n      } else {\n        router.replace('/login');\n      }\n      setLoading(false);\n    };\n\n    initializeAuth();\n\n    supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session);\n      if (!session) {\n        router.replace('/login');\n        setLoading(false);\n      }\n    });\n  }, [router]);\n\n  const handleLogout = async () => {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n      router.replace('/login');\n    } catch (error) {\n      console.error('Logout Error:', error.message);\n    }\n  };\n\n  return { session, username, loading, handleLogout };\n};"
                },
                {
                    "name": "useFishingData.js",
                    "type": "file",
                    "size": 8043,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "// hooks/useFishingData.js\nimport { useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { fetchWeatherData } from '../services/weatherService';\nimport { fetchWaterData } from '../services/waterService';\nimport { getFishingAdvice, getSpeciesTempRange } from '../services/adviceService';\n\nconst areObjectsEqual = (obj1, obj2) => {\n  return JSON.stringify(obj1) === JSON.stringify(obj2);\n};\n\nexport const useFishingData = (location, species, cityState, date, weatherData, timeOfDay) => {\n  const [advice, setAdvice] = useState(null);\n  const [forecastData, setForecastData] = useState(null);\n  const [waterData, setWaterData] = useState(null);\n  const [tempRange, setTempRange] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const retryRequest = async (fn, maxRetries = 3, delay = 1000) => {\n    for (let i = 0; i < maxRetries; i++) {\n      try {\n        return await fn();\n      } catch (err) {\n        if (err.response?.status === 429 && i < maxRetries - 1) {\n          const waitTime = delay * Math.pow(2, i);\n          console.warn(`Rate limit hit, retrying in ${waitTime}ms... (Attempt ${i + 1}/${maxRetries})`);\n          await new Promise(resolve => setTimeout(resolve, waitTime));\n        } else {\n          throw err;\n        }\n      }\n    }\n  };\n\n  const cacheWeatherData = async (key, data) => {\n    try {\n      await AsyncStorage.setItem(key, JSON.stringify(data));\n    } catch (err) {\n      console.error('Error caching weather data:', err.message);\n    }\n  };\n\n  const getCachedWeatherData = async (key) => {\n    try {\n      const cached = await AsyncStorage.getItem(key);\n      return cached ? JSON.parse(cached) : null;\n    } catch (err) {\n      console.error('Error retrieving cached weather data:', err.message);\n      return null;\n    }\n  };\n\n  const calculateFishingScore = (forecastMetrics, waterMetrics, speciesTempRange) => {\n    let score = 50;\n    if (waterMetrics?.waterTempF && speciesTempRange) {\n      if (waterMetrics.waterTempF >= speciesTempRange.min && waterMetrics.waterTempF <= speciesTempRange.max) score += 20;\n      else if (waterMetrics.waterTempF < speciesTempRange.min - 10 || waterMetrics.waterTempF > speciesTempRange.max + 10) score -= 10;\n    }\n    if (forecastMetrics.lowTempF >= 59 && forecastMetrics.highTempF <= 80) score += 10;\n    else if (forecastMetrics.highTempF - forecastMetrics.lowTempF > 20) score -= 5;\n    if (forecastMetrics.totalPrecipIn > 0 && forecastMetrics.totalPrecipIn <= 0.1) score += 5;\n    else if (forecastMetrics.totalPrecipIn > 0.5) score -= 5;\n    if (forecastMetrics.avgWindMph >= 3 && forecastMetrics.avgWindMph <= 10) score += 5;\n    else if (forecastMetrics.avgWindMph > 15) score -= 10;\n    if (forecastMetrics.windDeg >= 45 && forecastMetrics.windDeg <= 135) score += 3;\n    if (forecastMetrics.pressureHpa < 1013) score += 5;\n    if (typeof forecastMetrics.moonPhase === 'number') {\n      if (forecastMetrics.moonPhase === 0 || forecastMetrics.moonPhase === 0.5) score += 10;\n      else if (forecastMetrics.moonPhase === 0.25 || forecastMetrics.moonPhase === 0.75) score += 5;\n      else if (forecastMetrics.moonPhase > 0 && forecastMetrics.moonPhase < 1) score += 3;\n    } else {\n      const moonPhaseMap = {\n        'New Moon': 0,\n        'First Quarter': 0.25,\n        'Full Moon': 0.5,\n        'Last Quarter': 0.75,\n        'Waxing Crescent': 0.125,\n        'Waxing Gibbous': 0.375,\n        'Waning Gibbous': 0.625,\n        'Waning Crescent': 0.875,\n      };\n      const moonPhaseValue = moonPhaseMap[forecastMetrics.moonPhase] || 0;\n      if (moonPhaseValue === 0 || moonPhaseValue === 0.5) score += 10;\n      else if (moonPhaseValue === 0.25 || moonPhaseValue === 0.75) score += 5;\n      else if (moonPhaseValue > 0 && moonPhaseValue < 1) score += 3;\n    }\n    if (waterMetrics?.gageHeightFt !== null) score += 5;\n    if (forecastMetrics.cloudCover >= 70) score += 5;\n    if (forecastMetrics.humidity >= 70 && forecastMetrics.tempTrend === 'Warming') score += 3;\n    if (waterMetrics?.flowRateCfs && parseFloat(waterMetrics.flowRateCfs) > 500) score -= 5;\n\n    return Math.round((Math.max(0, Math.min(100, score)) / 100) * 5) || 1;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        if (!location?.coords?.latitude || !location?.coords?.longitude) {\n          throw new Error('Location coordinates are missing.');\n        }\n\n        const lat = location.coords.latitude;\n        const lon = location.coords.longitude;\n\n        let forecast;\n        const weatherCacheKey = `weather_${lat}_${lon}_${date}`;\n        const cachedForecast = await getCachedWeatherData(weatherCacheKey);\n        if (cachedForecast) {\n          forecast = cachedForecast;\n        } else if (weatherData) {\n          forecast = { forecastMetrics: weatherData, dailyForecasts: [] };\n          await cacheWeatherData(weatherCacheKey, forecast);\n        } else {\n          forecast = await retryRequest(() => fetchWeatherData(lat, lon, date));\n          await cacheWeatherData(weatherCacheKey, forecast);\n        }\n        if (!areObjectsEqual(forecastData, forecast)) {\n          console.log('Forecast Data Set:', forecast);\n          setForecastData(forecast);\n        }\n\n        let water = null;\n        try {\n          water = await retryRequest(() => fetchWaterData(lat, lon, date, forecast.dailyForecasts || []));\n          setWaterData(water);\n        } catch (err) {\n          console.error('Water Data Error:', err.message);\n          setError(`Water Data Fetch Failed: ${err.message}`);\n        }\n\n        let speciesRange = null;\n        try {\n          speciesRange = await retryRequest(() => getSpeciesTempRange(species));\n          setTempRange(speciesRange);\n        } catch (err) {\n          console.error('Species Temp Range Error:', err.message);\n          setError(prev => prev ? `${prev}; Species Temp Range Fetch Failed: ${err.message}` : `Species Temp Range Fetch Failed: ${err.message}`);\n        }\n\n        try {\n          const adviceResult = await retryRequest(() =>\n            getFishingAdvice(location, species, cityState, forecast.forecastMetrics, water, speciesRange, timeOfDay)\n          );\n          setAdvice(adviceResult);\n        } catch (err) {\n          console.error('Fishing Advice Error:', err.message);\n          setAdvice({\n            bait: 'Spinners or worms',\n            strategy: 'Fish near cover or deep pools, adjusted for recent weather.',\n            tackle: {\n              rod: 'Medium 7\\' rod, moderate action',\n              line: '10 lb monofilament',\n            },\n            additional_notes: 'Fallback advice due to API error.',\n          });\n          setError(prev => prev ? `${prev}; Fishing Advice Fetch Failed: ${err.message}` : `Fishing Advice Fetch Failed: ${err.message}`);\n        }\n      } catch (err) {\n        console.error('Initial Fetch Error:', err.message);\n        setError(err.message);\n        setForecastData(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [location, species, cityState, weatherData, date, timeOfDay]);\n\n  useEffect(() => {\n    if (forecastData?.forecastMetrics && (waterData || tempRange)) {\n      const rating = calculateFishingScore(forecastData.forecastMetrics, waterData, tempRange);\n      const updatedForecastData = {\n        ...forecastData,\n        forecastMetrics: { ...forecastData.forecastMetrics, rating },\n      };\n      if (!areObjectsEqual(forecastData, updatedForecastData)) {\n        console.log('Updated Forecast Data with Rating:', updatedForecastData);\n        setForecastData(updatedForecastData);\n      }\n    }\n  }, [forecastData, waterData, tempRange]);\n\n  return { advice, forecastData, waterData, tempRange, loading, error };\n};"
                },
                {
                    "name": "useFormSubmission.js",
                    "type": "file",
                    "size": 1933,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "import { useState } from 'react';\nimport { useRouter } from 'expo-router';\n\nexport const useFormSubmission = (location, species, customSpecies, cityState, weatherData, date, timeOfDay) => {\n  const router = useRouter();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async () => {\n    if (isLoading || !location?.coords || !timeOfDay) return;\n    setIsLoading(true);\n    const finalSpecies = species === 'Other' ? customSpecies : species;\n    const localDate = new Date(date);\n    localDate.setHours(0, 0, 0, 0);\n    const formattedDate = localDate.toISOString().split('T')[0];\n\n    const simplifiedLocation = {\n      coords: {\n        latitude: location.coords.latitude,\n        longitude: location.coords.longitude,\n      },\n    };\n\n    const simplifiedWeatherData = weatherData\n      ? {\n          lowTempF: Math.round((parseFloat(weatherData.avgTemp) * 9) / 5 + 32 - 5),\n          highTempF: Math.round((parseFloat(weatherData.avgTemp) * 9) / 5 + 32 + 5),\n          totalPrecipIn: Math.round(parseFloat(weatherData.totalPrecip) / 25.4),\n          avgWindMph: Math.round(parseFloat(weatherData.avgWind) * 0.621371),\n          windDeg: 0,\n          pressureHpa: 1013,\n          moonPhase: \"Unknown\",\n          cloudCover: 0,\n          humidity: 50,\n          tempTrend: \"Stable\",\n        }\n      : null;\n\n    try {\n      router.push({\n        pathname: '/results',\n        params: {\n          location: JSON.stringify(simplifiedLocation),\n          species: finalSpecies,\n          cityState,\n          weatherData: simplifiedWeatherData ? JSON.stringify(simplifiedWeatherData) : null,\n          date: formattedDate,\n          timeOfDay: timeOfDay,\n        },\n      });\n    } catch (error) {\n      console.error('Navigation Error:', error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return { isLoading, handleSubmit };\n};"
                },
                {
                    "name": "useLocation.js",
                    "type": "file",
                    "size": 4648,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "import { useState, useEffect, useCallback, useMemo } from 'react';\nimport axios from 'axios';\nimport { GOOGLE_MAPS_API_KEY } from '@env';\nimport { getCurrentLocation, fetchLocationAndWeather } from '../services/locationService';\nimport { debounce } from '../utils/debounce';\n\nexport const useLocation = () => {\n  const [useCurrentLocation, setUseCurrentLocation] = useState(false);\n  const [location, setLocation] = useState(null);\n  const [cityState, setCityState] = useState('Select a location'); // Default non-empty string\n  const [manualCity, setManualCity] = useState('');\n  const [manualState, setManualState] = useState('');\n  const [isFetchingLocation, setIsFetchingLocation] = useState(false);\n  const [lastLocationFetch, setLastLocationFetch] = useState(null);\n\n  const initializeCurrentLocation = useCallback(async () => {\n    setIsFetchingLocation(true);\n    if (lastLocationFetch) {\n      setLocation(lastLocationFetch);\n      try {\n        const response = await axios.get(\n          `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lastLocationFetch.coords.latitude},${lastLocationFetch.coords.longitude}&key=${GOOGLE_MAPS_API_KEY}`\n        );\n        if (response.data.results && response.data.results.length > 0) {\n          const addressComponents = response.data.results[0].address_components;\n          const city = addressComponents.find(comp => comp.types.includes('locality'))?.long_name || 'Unknown City';\n          const state = addressComponents.find(comp => comp.types.includes('administrative_area_level_1'))?.short_name || 'Unknown State';\n          const resolvedCityState = `${city}, ${state}`;\n          setCityState(resolvedCityState);\n          setManualCity(city);\n          setManualState(state);\n        } else {\n          setCityState('Location unavailable');\n        }\n      } catch (error) {\n        console.error('Geocoding Error:', error.message);\n        setCityState('Location unavailable');\n      }\n      setIsFetchingLocation(false);\n      return;\n    }\n\n    const loc = await getCurrentLocation();\n    if (loc) {\n      setLocation(loc);\n      setLastLocationFetch(loc);\n      try {\n        const response = await axios.get(\n          `https://maps.googleapis.com/maps/api/geocode/json?latlng=${loc.coords.latitude},${loc.coords.longitude}&key=${GOOGLE_MAPS_API_KEY}`\n        );\n        if (response.data.results && response.data.results.length > 0) {\n          const addressComponents = response.data.results[0].address_components;\n          const city = addressComponents.find(comp => comp.types.includes('locality'))?.long_name || 'Unknown City';\n          const state = addressComponents.find(comp => comp.types.includes('administrative_area_level_1'))?.short_name || 'Unknown State';\n          const resolvedCityState = `${city}, ${state}`;\n          setCityState(resolvedCityState);\n          setManualCity(city);\n          setManualState(state);\n        } else {\n          setCityState('Location unavailable');\n        }\n      } catch (error) {\n        console.error('Geocoding Error:', error.message);\n        setCityState('Location unavailable');\n      }\n    } else {\n      console.error('Location permission denied or fetch failed');\n      setCityState('Location permission denied');\n    }\n    setIsFetchingLocation(false);\n  }, [lastLocationFetch]);\n\n  const debouncedInitializeCurrentLocation = useMemo(\n    () => debounce(initializeCurrentLocation, 1000),\n    [initializeCurrentLocation]\n  );\n\n  useEffect(() => {\n    if (useCurrentLocation) {\n      debouncedInitializeCurrentLocation();\n    } else {\n      if (location && !manualCity && !manualState) {\n        setLocation(null);\n        setLastLocationFetch(null);\n        setIsFetchingLocation(false);\n        setCityState('Select a location');\n      }\n    }\n  }, [useCurrentLocation, manualCity, manualState, debouncedInitializeCurrentLocation]);\n\n  const resolveManualLocation = async (targetCityState) => {\n    const result = await fetchLocationAndWeather(false, targetCityState, null);\n    const loc = result.loc;\n    if (!loc?.coords) {\n      console.error('Failed to resolve location coordinates:', { targetCityState, manualCity, manualState });\n      return null;\n    }\n    setLocation(loc);\n    setLastLocationFetch(loc);\n    return loc;\n  };\n\n  return {\n    useCurrentLocation,\n    setUseCurrentLocation,\n    location,\n    setLocation,\n    cityState,\n    setCityState,\n    manualCity,\n    setManualCity,\n    manualState,\n    setManualState,\n    isFetchingLocation,\n    resolveManualLocation,\n  };\n};"
                },
                {
                    "name": "useSpecies.js",
                    "type": "file",
                    "size": 2436,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "// hooks/useSpecies.js\nimport { useState } from 'react';\nimport { getSpeciesListFromAI } from '../services/adviceService';\nimport { fetchLocationAndWeather } from '../services/locationService';\n\nexport const useSpecies = () => {\n  const [species, setSpecies] = useState('');\n  const [customSpecies, setCustomSpecies] = useState('');\n  const [speciesList, setSpeciesList] = useState([]);\n  const [weatherData, setWeatherData] = useState(null);\n  const [isFetchingSpecies, setIsFetchingSpecies] = useState(false);\n\n  const handleFetchSpecies = async (useCurrentLocation, cityState, manualCity, manualState, location) => {\n    setIsFetchingSpecies(true);\n    const targetCityState = useCurrentLocation ? cityState : `${manualCity}, ${manualState}`;\n    if (!targetCityState) {\n      console.error('No location specified');\n      setSpeciesList([]);\n      setIsFetchingSpecies(false);\n      return null;\n    }\n\n    let loc = useCurrentLocation ? location : null;\n    if (!useCurrentLocation) {\n      const result = await fetchLocationAndWeather(false, targetCityState, null);\n      loc = result.loc;\n      console.log('Manual location result:', loc);\n      if (!loc?.coords) {\n        console.error('Failed to resolve location coordinates:', { targetCityState, manualCity, manualState });\n        setSpeciesList([]);\n        setIsFetchingSpecies(false);\n        return null;\n      }\n    }\n\n    try {\n      const weather = useCurrentLocation\n        ? (await fetchLocationAndWeather(true, targetCityState, loc)).weather\n        : null;\n      setWeatherData(weather);\n      const speciesData = await getSpeciesListFromAI(targetCityState);\n      const newSpeciesList = [...speciesData, 'Other'];\n      setSpeciesList(newSpeciesList);\n      setSpecies('');\n      setCustomSpecies('');\n      console.log('New species list:', newSpeciesList);\n      return loc;\n    } catch (error) {\n      console.error('Fetch Error:', error.message);\n      const fallbackSpecies = await getSpeciesListFromAI('Location unavailable');\n      setSpeciesList([...fallbackSpecies, 'Other']);\n      setWeatherData(null);\n      setCustomSpecies('');\n      return null;\n    } finally {\n      setIsFetchingSpecies(false);\n    }\n  };\n\n  return {\n    species,\n    setSpecies,\n    customSpecies,\n    setCustomSpecies,\n    speciesList,\n    weatherData,\n    isFetchingSpecies,\n    handleFetchSpecies,\n  };\n};"
                }
            ]
        },
        {
            "name": "services",
            "type": "directory",
            "children": [
                {
                    "name": "adviceService.js",
                    "type": "file",
                    "size": 240,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "// Import the original functions from api.js\nimport { getSpeciesListFromAI, getFishingAdvice, getSpeciesTempRange } from '../api';\n\n// Export the original functions\nexport { getSpeciesListFromAI, getFishingAdvice, getSpeciesTempRange };"
                },
                {
                    "name": "locationService.js",
                    "type": "file",
                    "size": 2609,
                    "modified": "Sun Mar 23 10:29:22 2025",
                    "content": "import * as Location from 'expo-location';\nimport axios from 'axios';\nimport { GOOGLE_MAPS_API_KEY } from '@env';\n\nexport const fetchLocationAndWeather = async (useCurrentLocation, targetCityState, currentLocation) => {\n  let loc = useCurrentLocation ? currentLocation : null;\n  let weather = null;\n\n  if (useCurrentLocation && !loc) {\n    loc = await getCurrentLocation();\n    if (!loc) return { loc: null, weather: null };\n  } else if (!useCurrentLocation) {\n    try {\n      const response = await axios.get(\n        `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(targetCityState)}&key=${GOOGLE_MAPS_API_KEY}`\n      );\n      if (response.data.results && response.data.results.length > 0) {\n        const { lat, lng } = response.data.results[0].geometry.location;\n        loc = { coords: { latitude: lat, longitude: lng } };\n      } else {\n        throw new Error('No geocoding results found');\n      }\n    } catch (error) {\n      console.error('Geocoding Error:', error.message);\n      return { loc: null, weather: null };\n    }\n  }\n\n  if (loc) {\n    try {\n      const endDate = new Date().toISOString().split('T')[0];\n      const startDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n      const weatherResponse = await axios.get(\n        `https://archive-api.open-meteo.com/v1/archive?latitude=${loc.coords.latitude}&longitude=${loc.coords.longitude}&start_date=${startDate}&end_date=${endDate}&hourly=temperature_2m,precipitation,wind_speed_10m`\n      );\n      const weatherData = weatherResponse.data.hourly;\n      weather = {\n        avgTemp: (weatherData.temperature_2m.reduce((a, b) => a + b, 0) / weatherData.temperature_2m.length).toFixed(1),\n        totalPrecip: weatherData.precipitation.reduce((a, b) => a + b, 0).toFixed(1),\n        avgWind: (weatherData.wind_speed_10m.reduce((a, b) => a + b, 0) / weatherData.wind_speed_10m.length).toFixed(1)\n      };\n    } catch (error) {\n      console.error('Weather Fetch Error:', error.message);\n      weather = null;\n    }\n  }\n\n  return { loc, weather };\n};\n\nexport const getCurrentLocation = async () => {\n  let { status } = await Location.requestForegroundPermissionsAsync();\n  if (status !== 'granted') {\n    console.error('Location permission denied');\n    return null;\n  }\n  try {\n    const loc = await Location.getCurrentPositionAsync({});\n    console.log('Current location fetched:', loc.coords);\n    return loc;\n  } catch (error) {\n    console.error('Location fetch error:', error.message);\n    return null;\n  }\n};"
                },
                {
                    "name": "supabaseClient.js",
                    "type": "file",
                    "size": 490,
                    "modified": "Sun Apr  6 21:55:30 2025",
                    "content": "import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;\nconst supabaseAnonKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    storage: AsyncStorage,\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: false, // Set to false for Expo web\n  },\n});"
                },
                {
                    "name": "waterService.js",
                    "type": "file",
                    "size": 3477,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "import axios from 'axios';\n\nconst forecastWaterData = (waterTempF, gageHeightFt, daysAhead, dailyForecasts) => {\n  const forecast = [];\n  const baseTemp = waterTempF || 60;\n  const baseHeight = gageHeightFt || 1;\n\n  for (let i = 0; i < daysAhead; i++) {\n    const dayForecast = dailyForecasts[i] || dailyForecasts[dailyForecasts.length - 1] || {};\n    const tempAdjustment = dayForecast.temp ? (dayForecast.temp.max - 32) * 0.05 : 0.5;\n    const heightAdjustment = dayForecast.rain ? dayForecast.rain * 0.1 : 0.05;\n    // Estimate clarity: More rain = murkier water\n    const clarity = dayForecast.rain > 0.5 ? 'Murky' : dayForecast.rain > 0.1 ? 'Slightly Murky' : 'Clear';\n    // Estimate flow rate increase based on gage height and precipitation\n    const flowRateAdjustment = dayForecast.rain ? dayForecast.rain * 50 : 10;\n\n    forecast.push({\n      waterTempF: baseTemp + tempAdjustment * (i + 1),\n      gageHeightFt: baseHeight + heightAdjustment * (i + 1),\n      clarity: clarity,\n      flowRateCfs: (baseHeight * 100 + flowRateAdjustment * (i + 1)).toFixed(1), // Rough estimate\n    });\n  }\n\n  return forecast;\n};\n\nexport const fetchWaterData = async (lat, lon, date, dailyForecasts) => {\n  const westLon = (lon - 0.5).toFixed(6);\n  const southLat = (lat - 0.5).toFixed(6);\n  const eastLon = (lon + 0.5).toFixed(6);\n  const northLat = (lat + 0.5).toFixed(6);\n  const bBox = `${westLon},${southLat},${eastLon},${northLat}`;\n  const usgsUrl = `https://waterservices.usgs.gov/nwis/dv/`;\n\n  const todayLocal = new Date();\n  todayLocal.setHours(0, 0, 0, 0);\n  const selectedLocal = new Date(`${date}T00:00:00`);\n  selectedLocal.setHours(0, 0, 0, 0);\n\n  let waterMetrics = { waterTempF: null, gageHeightFt: null, clarity: 'Clear', flowRateCfs: null };\n  const lastAvailableDate = todayLocal.toISOString().split('T')[0];\n  const usgsParams = {\n    format: 'json',\n    bBox: bBox,\n    parameterCd: '00010,00065,00060', // Add 00060 for flow rate (discharge in CFS)\n    startDT: lastAvailableDate,\n    endDT: lastAvailableDate\n  };\n  console.log('Fetching USGS baseline:', `${usgsUrl}?${new URLSearchParams(usgsParams).toString()}`);\n  const usgsResponse = await axios.get(usgsUrl, { params: usgsParams });\n  const timeSeries = usgsResponse.data.value.timeSeries;\n  if (timeSeries.length > 0) {\n    const tempSeries = timeSeries.find(ts => ts.variable.variableCode[0].value === '00010');\n    const levelSeries = timeSeries.find(ts => ts.variable.variableCode[0].value === '00065');\n    const flowSeries = timeSeries.find(ts => ts.variable.variableCode[0].value === '00060');\n    if (tempSeries?.values[0]?.value[0]?.value) {\n      waterMetrics.waterTempF = (parseFloat(tempSeries.values[0].value[0].value) * 9 / 5) + 32;\n    }\n    if (levelSeries?.values[0]?.value[0]?.value) {\n      waterMetrics.gageHeightFt = parseFloat(levelSeries.values[0].value[0].value);\n    }\n    if (flowSeries?.values[0]?.value[0]?.value) {\n      waterMetrics.flowRateCfs = parseFloat(flowSeries.values[0].value[0].value).toFixed(1);\n    }\n  }\n\n  const daysAhead = Math.ceil((selectedLocal - todayLocal) / (1000 * 60 * 60 * 24));\n  if (daysAhead > 0) {\n    const forecastWater = forecastWaterData(waterMetrics.waterTempF, waterMetrics.gageHeightFt, daysAhead, dailyForecasts);\n    waterMetrics = forecastWater[daysAhead - 1];\n    console.log('Forecasted water data for', date, ':', waterMetrics);\n  }\n\n  return waterMetrics;\n};"
                },
                {
                    "name": "weatherService.js",
                    "type": "file",
                    "size": 3297,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "import axios from 'axios';\nimport { OPEN_WEATHER_MAP_API_KEY } from '@env';\nimport { validateDate } from '../utils/dateUtils';\n\nconst getMoonPhaseName = (moonPhase) => {\n  if (moonPhase === undefined || moonPhase === null || moonPhase === 'Not available') return 'Unknown';\n  if (moonPhase === 0) return 'New Moon';\n  if (moonPhase === 0.25) return 'First Quarter';\n  if (moonPhase === 0.5) return 'Full Moon';\n  if (moonPhase === 0.75) return 'Last Quarter';\n  if (moonPhase > 0 && moonPhase < 0.25) return 'Waxing Crescent';\n  if (moonPhase > 0.25 && moonPhase < 0.5) return 'Waxing Gibbous';\n  if (moonPhase > 0.5 && moonPhase < 0.75) return 'Waning Gibbous';\n  if (moonPhase > 0.75 && moonPhase < 1) return 'Waning Crescent';\n  return 'Unknown';\n};\n\nexport const fetchWeatherData = async (lat, lon, date) => {\n  const weatherUrl = `https://api.openweathermap.org/data/3.0/onecall?lat=${lat}&lon=${lon}&exclude=minutely,hourly,alerts&units=imperial&appid=${OPEN_WEATHER_MAP_API_KEY}`;\n  const response = await axios.get(weatherUrl);\n  console.log('Weather API Response:', JSON.stringify(response.data, null, 2)); // Log the full response for debugging\n\n  const todayLocal = new Date();\n  todayLocal.setHours(0, 0, 0, 0);\n\n  const selectedLocal = new Date(`${date}T00:00:00`);\n  selectedLocal.setHours(0, 0, 0, 0);\n\n  const maxDateLocal = new Date(todayLocal);\n  maxDateLocal.setDate(todayLocal.getDate() + 7);\n\n  if (!validateDate(selectedLocal, todayLocal, maxDateLocal)) {\n    throw new Error('Date must be within 7 days from today.');\n  }\n\n  const dailyForecasts = response.data.daily;\n  const dayOffset = Math.floor((selectedLocal - todayLocal) / (1000 * 60 * 60 * 24));\n  console.log('Day offset:', dayOffset, 'Selected date:', selectedLocal.toISOString().split('T')[0]);\n\n  let dailyForecast = dailyForecasts[dayOffset] || dailyForecasts[dailyForecasts.length - 1];\n  if (!dailyForecast) {\n    throw new Error('No forecast available for the selected date.');\n  }\n\n  // Calculate 3-day temperature trend (if available)\n  let tempTrend = 'Stable';\n  if (dayOffset >= 2 && dailyForecasts.length >= 3) {\n    const tempToday = dailyForecast.temp.max;\n    const tempYesterday = dailyForecasts[dayOffset - 1]?.temp.max || tempToday;\n    const tempTwoDaysAgo = dailyForecasts[dayOffset - 2]?.temp.max || tempYesterday;\n    if (tempToday > tempYesterday && tempYesterday > tempTwoDaysAgo) {\n      tempTrend = 'Warming';\n    } else if (tempToday < tempYesterday && tempYesterday < tempTwoDaysAgo) {\n      tempTrend = 'Cooling';\n    }\n  }\n\n  const moonPhase = getMoonPhaseName(dailyForecast.moon_phase);\n  const forecastMetrics = {\n    lowTempF: dailyForecast.temp?.min ?? 0,\n    highTempF: dailyForecast.temp?.max ?? 0,\n    totalPrecipIn: dailyForecast.rain ?? 0,\n    avgWindMph: dailyForecast.wind_speed ?? 0,\n    windDeg: dailyForecast.wind_deg ?? 0,\n    pressureHpa: dailyForecast.pressure ?? 1013,\n    moonPhase: moonPhase,\n    cloudCover: dailyForecast.clouds ?? 0, // Ensure cloudCover is always a number\n    humidity: dailyForecast.humidity ?? 0, // Ensure humidity is always a number\n    tempTrend: tempTrend,\n  };\n\n  console.log('Forecast Metrics:', forecastMetrics);\n  return { forecastMetrics, dailyForecasts };\n};"
                }
            ]
        },
        {
            "name": "styles",
            "type": "directory",
            "children": [
                {
                    "name": "AlertModalStyles.js",
                    "type": "file",
                    "size": 344,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "import { StyleSheet } from 'react-native';\n\nexport const AlertModalStyles = StyleSheet.create({\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#00CED1',\n    marginBottom: 10,\n    textAlign: 'center',\n  },\n  message: {\n    fontSize: 16,\n    color: '#333',\n    textAlign: 'center',\n    marginBottom: 20,\n  },\n});"
                },
                {
                    "name": "DateSelectorStyles.js",
                    "type": "file",
                    "size": 1246,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "// styles/DateSelectorStyles.js\nimport { StyleSheet } from 'react-native';\n\nexport const DateSelectorStyles = StyleSheet.create({\n  dateSection: { paddingHorizontal: 30, marginVertical: 50, alignItems: 'center' },\n  \n  dateButtonContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 10,\n  },\n  dateArrowButton: {\n    backgroundColor: '#00CED1',\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    borderRadius: 8,\n    marginHorizontal: 10,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.3,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  dateDisplay: {\n    backgroundColor: 'rgba(255, 255, 255, 0.9)',\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 8,\n    minWidth: 120,\n    alignItems: 'center',\n  },\n  dateText: {\n    fontSize: 16,\n    color: '#333',\n    fontWeight: '600',\n  },\n\n  selectorContainer: {\n    width: '80%',\n  },\n  timeSelectorContainer: {\n    marginTop: 20,\n  },\n\n  selectorDisplay: {\n    flex: 1,\n    backgroundColor: 'rgba(255, 255, 255, 0.9)',\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 8,\n    alignItems: 'center',\n  },\n});"
                },
                {
                    "name": "GlobalStyles.js",
                    "type": "file",
                    "size": 3271,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "// styles/GlobalStyles.js\nimport { StyleSheet } from 'react-native';\n\nexport const GlobalStyles = StyleSheet.create({\n  background: { flex: 1, width: '100%', height: '100%' },\n  keyboardAvoidingContainer: { flex: 1 },\n  \n  container: { \n    flex: 1, \n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    width: '100%',\n  },\n  \n  scrollContent: { flexGrow: 1, justifyContent: 'center' }, // Add justifyContent: 'center' to center content vertically\n  content: { \n    flex: 1, // Allow the content to take up available space\n    justifyContent: 'center', // Center children vertically\n    alignItems: 'center', // Center children horizontally\n    paddingVertical: 20,\n  },\n\n  header: { paddingHorizontal: 30, alignItems: 'center', marginBlock: 50 },\n  title: { fontSize: 28, fontWeight: 'bold', color: '#fff', textShadowColor: '#000', textShadowOffset: { width: 1, height: 1 }, textShadowRadius: 2 },\n  \n  customButton: { \n    backgroundColor: '#00CED1', \n    paddingVertical: 12, \n    paddingHorizontal: 20, \n    borderRadius: 12, \n    alignItems: 'center', \n    justifyContent: 'center', \n    shadowColor: '#000', \n    shadowOffset: { width: 0, height: 2 }, \n    shadowOpacity: 0.3, \n    shadowRadius: 4, \n    elevation: 5, \n    width: '100%' \n  },\n  \n  disabledButton: { backgroundColor: '#A9A9A9', opacity: 0.7 },\n  buttonText: { fontSize: 16, color: '#fff', fontWeight: '600' },\n  buttonContainer: {\n    marginBlock: 10,\n    width: '100%',\n    alignItems: 'center',\n  },\n  buttonSectionContainer: {\n    width: '80%',\n    alignItems: 'center',\n  },\n\n  label: { \n    fontSize: 18, \n    color: '#00CED1',  \n    fontWeight: '700',\n    marginBottom: 10,\n    textAlign: 'center',\n  },\n\n  placeholder: { \n    fontSize: 16, \n    color: '#fff', \n    marginVertical: 20, \n    textAlign: 'center', \n    textShadowColor: '#000', \n    textShadowOffset: { width: 1, height: 1 }, \n    textShadowRadius: 2 \n  },\n\n  loadingContainer: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: 'rgba(0, 0, 0, 0.5)' },\n\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  modalContent: {\n    backgroundColor: '#fff',\n    borderRadius: 10,\n    width: '80%',\n    maxHeight: '50%',\n    padding: 10,\n  },\n  dropdownItem: {\n    paddingVertical: 12,\n    paddingHorizontal: 15,\n    borderBottomWidth: 1,\n    borderBottomColor: '#eee',\n  },\n  dropdownItemText: {\n    fontSize: 16,\n    color: '#333',\n  },\n  dateItem: {\n    paddingVertical: 12,\n    paddingHorizontal: 15,\n    borderBottomWidth: 1,\n    borderBottomColor: '#eee',\n  },\n  dateItemText: {\n    fontSize: 16,\n    color: '#333',\n  },\n  selectedDateItem: {\n    backgroundColor: '#00CED1',\n  },\n  selectedDateItemText: {\n    color: '#fff',\n    fontWeight: '600',\n  },\n\n  backButton: { \n    backgroundColor: '#00CED1', \n    paddingVertical: 12, \n    paddingHorizontal: 20, \n    borderRadius: 12, \n    alignItems: 'center', \n    shadowColor: '#000', \n    shadowOffset: { width: 0, height: 2 }, \n    shadowOpacity: 0.3, \n    shadowRadius: 4, \n    elevation: 5, \n    marginBottom: 20, \n    marginHorizontal: 30 \n  },\n});"
                },
                {
                    "name": "HomeStyles.js",
                    "type": "file",
                    "size": 492,
                    "modified": "Fri Apr 11 21:20:44 2025",
                    "content": "// styles/HomeStyles.js\nimport { StyleSheet } from 'react-native';\n\nexport const HomeStyles = StyleSheet.create({\n  logoContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 10,\n  },\n  logo: {\n    width: 200,\n    height: 200,\n    borderRadius: 100,\n    borderWidth: 2,\n    borderColor: '#00CED1',\n    backgroundColor: 'transparent',\n  },\n\n  buttonSection: {  \n    alignItems: 'center', \n    marginBottom: 20,\n    width: '100%',\n  },\n});"
                },
                {
                    "name": "LocationToggleStyles.js",
                    "type": "file",
                    "size": 1541,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "// styles/LocationToggleStyles.js\nimport { StyleSheet } from 'react-native';\n\nexport const LocationToggleStyles = StyleSheet.create({\n  locationSection: { \n    paddingHorizontal: 30, \n    marginBottom: 20, \n    alignItems: 'center',\n    width: '100%',\n  },\n  locationText: { \n    fontSize: 16, \n    color: '#fff', \n    textAlign: 'center', \n    marginBottom: 10, \n    textShadowColor: '#000', \n    textShadowOffset: { width: 1, height: 1 }, \n    textShadowRadius: 2 \n  },\n  \n  input: { \n    height: 50,\n    minHeight: 50,\n    borderColor: '#ccc', \n    borderWidth: 1, \n    borderRadius: 10,\n    paddingHorizontal: 15, \n    marginBottom: 15,\n    backgroundColor: 'rgba(255, 255, 255, 0.95)', \n    color: '#333', \n    width: '100%',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 3,\n    elevation: 2,\n    fontSize: 16,\n  },\n\n  manualLocationContainer: {\n    alignItems: 'center',\n    width: '100%',\n    marginBottom: 20,\n  },\n\n  toggleContainer: { \n    flexDirection: 'row', \n    alignItems: 'center', \n    alignSelf: 'center',\n    marginBottom: 20,\n    backgroundColor: 'rgba(255, 255, 255, 0.9)', \n    paddingHorizontal: 15, \n    paddingVertical: 8, \n    borderRadius: 10,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.2,\n    shadowRadius: 4,\n    elevation: 3,\n    width: '70%',\n  },\n\n  toggleLabel: { fontSize: 16, color: '#333', marginRight: 10, fontWeight: '600' },\n});"
                },
                {
                    "name": "LoginStyles.js",
                    "type": "file",
                    "size": 508,
                    "modified": "Fri Apr 11 21:21:23 2025",
                    "content": "// styles/LoginStyles.js\nimport { StyleSheet } from 'react-native';\n\nexport const LoginStyles = StyleSheet.create({\n  containerLogin: {\n    width: '80%', // Match the width of other sections (e.g., GlobalStyles.buttonSectionContainer)\n    display: 'flex',\n    flexDirection: 'column',\n    marginHorizontal: 'auto', // Replace marginInline with marginHorizontal\n    justifyContent: 'center',\n  },\n  inputLoginSection: {\n    marginVertical: 25, // Replace marginBlock with marginVertical\n  },\n});"
                },
                {
                    "name": "ResultsStyles.js",
                    "type": "file",
                    "size": 1454,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "// styles/ResultsStyles.js\nimport { StyleSheet } from 'react-native';\n\nexport const ResultsStyles = StyleSheet.create({\n  forecastSection: { paddingHorizontal: 30, marginTop: 20 },\n  adviceSection: { paddingHorizontal: 30, marginVertical: 20 },\n  forecastCard: { backgroundColor: 'rgba(255, 255, 255, 0.9)', borderRadius: 12, padding: 15, shadowColor: '#000', shadowOffset: { width: 0, height: 2 }, shadowOpacity: 0.1, shadowRadius: 4, elevation: 3, width: '100%' },\n  adviceCard: { backgroundColor: 'rgba(255, 255, 255, 0.9)', borderRadius: 12, padding: 15, shadowColor: '#000', shadowOffset: { width: 0, height: 2 }, shadowOpacity: 0.1, shadowRadius: 4, elevation: 3, marginBottom: 20 },\n  field: { fontSize: 16, color: '#333', lineHeight: 24, marginBottom: 10 },\n  forecastField: { fontSize: 16, color: '#333', lineHeight: 24, marginBottom: 10 },\n  errorText: { fontSize: 16, color: '#fff', textAlign: 'center', textShadowColor: '#000', textShadowOffset: { width: 1, height: 1 }, textShadowRadius: 2 },\n\n  feedbackSection: {\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  feedbackLabel: {\n    fontSize: 16,\n    color: '#fff',\n    marginBottom: 10,\n    textShadowColor: '#000',\n    textShadowOffset: { width: 1, height: 1 },\n    textShadowRadius: 2,\n  },\n  feedbackButtonContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    width: '60%',\n  },\n  feedbackButton: {\n    width: '40%',\n  },\n});"
                },
                {
                    "name": "SignUpStyles.js",
                    "type": "file",
                    "size": 468,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "// styles/SignUpStyles.js\nimport { StyleSheet } from 'react-native';\n\nexport const SignUpStyles = StyleSheet.create({\n  containerSignUp: {\n    width: '80%', // Match the width of other sections\n    display: 'flex',\n    flexDirection: 'column',\n    marginHorizontal: 'auto', // Replace marginInline with marginHorizontal\n    justifyContent: 'center',\n  },\n  inputSignUpSection: {\n    marginVertical: 50, // Replace marginBlock with marginVertical\n  },\n});"
                },
                {
                    "name": "SpeciesPickerStyles.js",
                    "type": "file",
                    "size": 615,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "// styles/SpeciesPickerStyles.js\nimport { StyleSheet } from 'react-native';\n\nexport const SpeciesPickerStyles = StyleSheet.create({\n  speciesSection: { paddingHorizontal: 30, marginVertical: 50 },\n  \n  dropdownButton: {\n    backgroundColor: 'rgba(255, 255, 255, 0.95)',\n    paddingVertical: 12,\n    paddingHorizontal: 15,\n    borderRadius: 10,\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 3,\n    elevation: 2,\n  },\n  dropdownText: {\n    fontSize: 16,\n    color: '#333',\n    fontWeight: '500',\n  },\n});"
                }
            ]
        },
        {
            "name": "utils",
            "type": "directory",
            "children": [
                {
                    "name": "alert.js",
                    "type": "file",
                    "size": 248,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "// utils/alert.js\nimport { Alert, Platform } from 'react-native';\n\nexport const showAlert = (title, message) => {\n  if (Platform.OS === 'web') {\n    window.alert(`${title}\\n\\n${message}`);\n  } else {\n    Alert.alert(title, message);\n  }\n};"
                },
                {
                    "name": "dateUtils.js",
                    "type": "file",
                    "size": 678,
                    "modified": "Sun Feb 23 00:29:00 2025",
                    "content": "export const formatDate = (dateString) => {\n    const dateObj = new Date(`${dateString}T00:00:00`); // Force local parsing for midnight\n    const dayOfWeek = dateObj.toLocaleDateString('en-US', { weekday: 'long', timeZone: 'America/Chicago' }); // Explicitly use CST\n    const monthName = dateObj.toLocaleDateString('en-US', { month: 'long', timeZone: 'America/Chicago' });\n    const day = dateObj.getDate();\n    const year = dateObj.getFullYear();\n    return `${dayOfWeek} ${monthName} ${day}, ${year}`;\n  };\n  \n  export const validateDate = (selectedLocal, todayLocal, maxDateLocal) => {\n    return selectedLocal >= todayLocal && selectedLocal <= maxDateLocal;\n  };"
                },
                {
                    "name": "debounce.js",
                    "type": "file",
                    "size": 208,
                    "modified": "Fri Apr 11 20:57:36 2025",
                    "content": "// utils/debounce.js\nexport const debounce = (func, wait) => {\n    let timeout;\n    return (...args) => {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => func(...args), wait);\n    };\n  };"
                }
            ]
        }
    ]
}